//
//  Task-InstanceHandling-Tests.swift
//  MuTests
//
//  Created by Vincent Young on 9/5/20.
//  Copyright Â© 2020 Vincent Young. All rights reserved.
//

@testable import Mu
import CoreData
import XCTest

class Task_InstanceHandling_Tests: XCTestCase {
    
    let dowMin: Float = 1, dowMax: Float = 2, womMin: Float = 3, womMax: Float = 4, domMin: Float = 5, domMax: Float = 6
    
    func getDowTargetSet(_ moc: NSManagedObjectContext) -> TaskTargetSet {
        let dowPattern = DayPattern(dow: Set<Int16>([1,2,3,6]), wom: Set<Int16>(), dom: Set<Int16>())
        return TaskTargetSet(entity: TaskTargetSet.getEntityDescription(moc)!,
                             insertInto: moc,
                             min: dowMin, max: dowMax,
                             minOperator: 1, maxOperator: 1,
                             priority: 3,
                             pattern: dowPattern)
    }
    func getWomTargetSet(_ moc: NSManagedObjectContext) -> TaskTargetSet {
        let womPattern = DayPattern(dow: Set<Int16>([2,4]), wom: Set<Int16>([1,3,5]), dom: Set<Int16>())
        return TaskTargetSet(entity: TaskTargetSet.getEntityDescription(moc)!,
                             insertInto: moc,
                             min: womMin, max: womMax,
                             minOperator: 1, maxOperator: 1,
                             priority: 6,
                             pattern: womPattern)
    }
    func getDomTargetSet(_ moc: NSManagedObjectContext) -> TaskTargetSet {
        let domPattern = DayPattern(dow: Set<Int16>(), wom: Set<Int16>(), dom: Set<Int16>([0,1,2,3,4,5,6,7,8,9,10]))
        return TaskTargetSet(entity: TaskTargetSet.getEntityDescription(moc)!,
                             insertInto: moc,
                             min: domMin, max: domMax,
                             minOperator: 1, maxOperator: 1,
                             priority: 9,
                             pattern: domPattern)
    }
    
    /*
     Dates from Jan 1, 2020 to Jan 1, 2021 and String representations of dates that each TaskTargetSet applies to
     */
    var task: Task!
    let startDate = Calendar.current.date(from: DateComponents(year: 2019, month: 11, day: 1))!
    let endDate = Calendar.current.date(from: DateComponents(year: 2021, month: 3, day: 1))!
    let globalDowDates: Set<String> =  Set(["2019-11-01", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-08", "2019-11-10", "2019-11-11", "2019-11-12", "2019-11-15", "2019-11-17", "2019-11-18", "2019-11-19", "2019-11-22", "2019-11-24", "2019-11-25", "2019-11-26", "2019-11-29", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-06", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-13", "2019-12-15", "2019-12-16", "2019-12-17", "2019-12-20", "2019-12-22", "2019-12-23", "2019-12-24", "2019-12-27", "2019-12-29", "2019-12-30", "2019-12-31", "2020-01-03", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-10", "2020-01-12", "2020-01-13", "2020-01-14", "2020-01-17", "2020-01-19", "2020-01-20", "2020-01-21", "2020-01-24", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-31", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-07", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-14", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-21", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-28", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-06", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-13", "2020-03-15", "2020-03-16", "2020-03-17", "2020-03-20", "2020-03-22", "2020-03-23", "2020-03-24", "2020-03-27", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-03", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-10", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-17", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-24", "2020-04-26", "2020-04-27", "2020-04-28", "2020-05-01", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-08", "2020-05-10", "2020-05-11", "2020-05-12", "2020-05-15", "2020-05-17", "2020-05-18", "2020-05-19", "2020-05-22", "2020-05-24", "2020-05-25", "2020-05-26", "2020-05-29", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-05", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-12", "2020-06-14", "2020-06-15", "2020-06-16", "2020-06-19", "2020-06-21", "2020-06-22", "2020-06-23", "2020-06-26", "2020-06-28", "2020-06-29", "2020-06-30", "2020-07-03", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-10", "2020-07-12", "2020-07-13", "2020-07-14", "2020-07-17", "2020-07-19", "2020-07-20", "2020-07-21", "2020-07-24", "2020-07-26", "2020-07-27", "2020-07-28", "2020-07-31", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-07", "2020-08-09", "2020-08-10", "2020-08-11", "2020-08-14", "2020-08-16", "2020-08-17", "2020-08-18", "2020-08-21", "2020-08-23", "2020-08-24", "2020-08-25", "2020-08-28", "2020-08-30", "2020-08-31", "2020-09-01", "2020-09-04", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-11", "2020-09-13", "2020-09-14", "2020-09-15", "2020-09-18", "2020-09-20", "2020-09-21", "2020-09-22", "2020-09-25", "2020-09-27", "2020-09-28", "2020-09-29", "2020-10-02", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-09", "2020-10-11", "2020-10-12", "2020-10-13", "2020-10-16", "2020-10-18", "2020-10-19", "2020-10-20", "2020-10-23", "2020-10-25", "2020-10-26", "2020-10-27", "2020-10-30", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-06", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-13", "2020-11-15", "2020-11-16", "2020-11-17", "2020-11-20", "2020-11-22", "2020-11-23", "2020-11-24", "2020-11-27", "2020-11-29", "2020-11-30", "2020-12-01", "2020-12-04", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-11", "2020-12-13", "2020-12-14", "2020-12-15", "2020-12-18", "2020-12-20", "2020-12-21", "2020-12-22", "2020-12-25", "2020-12-27", "2020-12-28", "2020-12-29", "2021-01-01", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-08", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-15", "2021-01-17", "2021-01-18", "2021-01-19", "2021-01-22", "2021-01-24", "2021-01-25", "2021-01-26", "2021-01-29", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-05", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-12", "2021-02-14", "2021-02-15", "2021-02-16", "2021-02-19", "2021-02-21", "2021-02-22", "2021-02-23", "2021-02-26", "2021-02-28", "2021-03-01"])
    let globalWomDates: Set<String> = Set(["2019-11-04", "2019-11-06", "2019-11-18", "2019-11-20", "2019-11-25", "2019-11-27", "2019-12-02", "2019-12-04", "2019-12-16", "2019-12-18", "2019-12-25", "2019-12-30", "2020-01-01", "2020-01-06", "2020-01-15", "2020-01-20", "2020-01-27", "2020-01-29", "2020-02-03", "2020-02-05", "2020-02-17", "2020-02-19", "2020-02-24", "2020-02-26", "2020-03-02", "2020-03-04", "2020-03-16", "2020-03-18", "2020-03-25", "2020-03-30", "2020-04-01", "2020-04-06", "2020-04-15", "2020-04-20", "2020-04-27", "2020-04-29", "2020-05-04", "2020-05-06", "2020-05-18", "2020-05-20", "2020-05-25", "2020-05-27", "2020-06-01", "2020-06-03", "2020-06-15", "2020-06-17", "2020-06-24", "2020-06-29", "2020-07-01", "2020-07-06", "2020-07-15", "2020-07-20", "2020-07-27", "2020-07-29", "2020-08-03", "2020-08-05", "2020-08-17", "2020-08-19", "2020-08-26", "2020-08-31", "2020-09-02", "2020-09-07", "2020-09-16", "2020-09-21", "2020-09-28", "2020-09-30", "2020-10-05", "2020-10-07", "2020-10-19", "2020-10-21", "2020-10-26", "2020-10-28", "2020-11-02", "2020-11-04", "2020-11-16", "2020-11-18", "2020-11-25", "2020-11-30", "2020-12-02", "2020-12-07", "2020-12-16", "2020-12-21", "2020-12-28", "2020-12-30", "2021-01-04", "2021-01-06", "2021-01-18", "2021-01-20", "2021-01-25", "2021-01-27", "2021-02-01", "2021-02-03", "2021-02-15", "2021-02-17", "2021-02-22", "2021-02-24", "2021-03-01"])
    let globalDomDates: Set<String> = Set(["2019-11-01", "2019-11-02", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-06", "2019-11-07", "2019-11-08", "2019-11-09", "2019-11-10", "2019-11-30", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-04", "2019-12-05", "2019-12-06", "2019-12-07", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-31", "2020-01-01", "2020-01-02", "2020-01-03", "2020-01-04", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-08", "2020-01-09", "2020-01-10", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-04", "2020-03-05", "2020-03-06", "2020-03-07", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-30", "2020-05-01", "2020-05-02", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-06", "2020-05-07", "2020-05-08", "2020-05-09", "2020-05-10", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-03", "2020-06-04", "2020-06-05", "2020-06-06", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-10", "2020-06-30", "2020-07-01", "2020-07-02", "2020-07-03", "2020-07-04", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-08", "2020-07-09", "2020-07-10", "2020-07-31", "2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08", "2020-08-09", "2020-08-10", "2020-08-31", "2020-09-01", "2020-09-02", "2020-09-03", "2020-09-04", "2020-09-05", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-09", "2020-09-10", "2020-09-30", "2020-10-01", "2020-10-02", "2020-10-03", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-07", "2020-10-08", "2020-10-09", "2020-10-10", "2020-10-31", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-04", "2020-11-05", "2020-11-06", "2020-11-07", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-30", "2020-12-01", "2020-12-02", "2020-12-03", "2020-12-04", "2020-12-05", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-09", "2020-12-10", "2020-12-31", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-03", "2021-02-04", "2021-02-05", "2021-02-06", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-10", "2021-02-28", "2021-03-01"])
    
    override func setUpWithError() throws {
        CDCoordinator.moc = TestContainer.testMoc
        task = Task(entity: Task.getEntityDescription(CDCoordinator.moc)!,
                    insertInto: CDCoordinator.moc,
                    name: "Task", tags: [],
                    startDate: startDate, endDate: endDate,
                    targetSets: [getDowTargetSet(CDCoordinator.moc),
                                 getWomTargetSet(CDCoordinator.moc),
                                 getDomTargetSet(CDCoordinator.moc)])
    }
    
    override func tearDownWithError() throws {
        CDCoordinator.moc.rollback()
    }
    
}

// MARK: - updateSpecificInstances tests

extension Task_InstanceHandling_Tests {
    
    // MARK: - Task type updates
    
    func test_updateSpecificInstances_confirmTaskType() throws {
        task.updateSpecificInstances(dates: [])
        XCTAssert(task.getTaskType == SaveFormatter.taskTypeToStored(type: .specific))
    }
    
    // MARK: - TaskInstance generation
    
    func test_updateSpecificInstances_confirmInstances() throws {
        
        let dates: [Date] = [Calendar.current.date(from: DateComponents(year: 2020, month: 1, day: 1))!,
                             Calendar.current.date(from: DateComponents(year: 2021, month: 2, day: 1))!,
                             Calendar.current.date(from: DateComponents(year: 2022, month: 3, day: 1))!]
        task.updateSpecificInstances(dates: dates)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        let instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 3)
        for instance in instances {
            XCTAssert(dates.contains(SaveFormatter.storedStringToDate(instance.date!)))
        }
        
    }
    
}

// MARK: - updateRecurringInstances tests

extension Task_InstanceHandling_Tests {
    
    // MARK: - Task type updates
    
    func test_updateRecurringInstances_withoutTargetSets_confirmTaskType() throws {
        task.updateRecurringInstances(startDate: Date(), endDate: Date())
        XCTAssert(task.getTaskType == SaveFormatter.taskTypeToStored(type: .recurring))
    }
    
    func test_updateRecurringInstances_withTargetSets_confirmTaskType() throws {
        task.updateRecurringInstances(startDate: Date(), endDate: Date(), targetSets: Set<TaskTargetSet>())
        XCTAssert(task.getTaskType == SaveFormatter.taskTypeToStored(type: .recurring))
    }
    
    // MARK: - Start or end date updates
    
    func test_updateRecurringInstances_startDateEarlier() throws {
        
        var newDowDates: Set<String> = Set(["2019-01-01", "2019-01-04", "2019-01-06", "2019-01-07", "2019-01-08", "2019-01-11", "2019-01-13", "2019-01-14", "2019-01-15", "2019-01-18", "2019-01-20", "2019-01-21", "2019-01-22", "2019-01-25", "2019-01-27", "2019-01-28", "2019-01-29", "2019-02-01", "2019-02-03", "2019-02-04", "2019-02-05", "2019-02-08", "2019-02-10", "2019-02-11", "2019-02-12", "2019-02-15", "2019-02-17", "2019-02-18", "2019-02-19", "2019-02-22", "2019-02-24", "2019-02-25", "2019-02-26", "2019-03-01", "2019-03-03", "2019-03-04", "2019-03-05", "2019-03-08", "2019-03-10", "2019-03-11", "2019-03-12", "2019-03-15", "2019-03-17", "2019-03-18", "2019-03-19", "2019-03-22", "2019-03-24", "2019-03-25", "2019-03-26", "2019-03-29", "2019-03-31", "2019-04-01", "2019-04-02", "2019-04-05", "2019-04-07", "2019-04-08", "2019-04-09", "2019-04-12", "2019-04-14", "2019-04-15", "2019-04-16", "2019-04-19", "2019-04-21", "2019-04-22", "2019-04-23", "2019-04-26", "2019-04-28", "2019-04-29", "2019-04-30", "2019-05-03", "2019-05-05", "2019-05-06", "2019-05-07", "2019-05-10", "2019-05-12", "2019-05-13", "2019-05-14", "2019-05-17", "2019-05-19", "2019-05-20", "2019-05-21", "2019-05-24", "2019-05-26", "2019-05-27", "2019-05-28", "2019-05-31", "2019-06-02", "2019-06-03", "2019-06-04", "2019-06-07", "2019-06-09", "2019-06-10", "2019-06-11", "2019-06-14", "2019-06-16", "2019-06-17", "2019-06-18", "2019-06-21", "2019-06-23", "2019-06-24", "2019-06-25", "2019-06-28", "2019-06-30", "2019-07-01", "2019-07-02", "2019-07-05", "2019-07-07", "2019-07-08", "2019-07-09", "2019-07-12", "2019-07-14", "2019-07-15", "2019-07-16", "2019-07-19", "2019-07-21", "2019-07-22", "2019-07-23", "2019-07-26", "2019-07-28", "2019-07-29", "2019-07-30", "2019-08-02", "2019-08-04", "2019-08-05", "2019-08-06", "2019-08-09", "2019-08-11", "2019-08-12", "2019-08-13", "2019-08-16", "2019-08-18", "2019-08-19", "2019-08-20", "2019-08-23", "2019-08-25", "2019-08-26", "2019-08-27", "2019-08-30", "2019-09-01", "2019-09-02", "2019-09-03", "2019-09-06", "2019-09-08", "2019-09-09", "2019-09-10", "2019-09-13", "2019-09-15", "2019-09-16", "2019-09-17", "2019-09-20", "2019-09-22", "2019-09-23", "2019-09-24", "2019-09-27", "2019-09-29", "2019-09-30", "2019-10-01", "2019-10-04", "2019-10-06", "2019-10-07", "2019-10-08", "2019-10-11", "2019-10-13", "2019-10-14", "2019-10-15", "2019-10-18", "2019-10-20", "2019-10-21", "2019-10-22", "2019-10-25", "2019-10-27", "2019-10-28", "2019-10-29", "2019-11-01", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-08", "2019-11-10", "2019-11-11", "2019-11-12", "2019-11-15", "2019-11-17", "2019-11-18", "2019-11-19", "2019-11-22", "2019-11-24", "2019-11-25", "2019-11-26", "2019-11-29", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-06", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-13", "2019-12-15", "2019-12-16", "2019-12-17", "2019-12-20", "2019-12-22", "2019-12-23", "2019-12-24", "2019-12-27", "2019-12-29", "2019-12-30", "2019-12-31", "2020-01-03", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-10", "2020-01-12", "2020-01-13", "2020-01-14", "2020-01-17", "2020-01-19", "2020-01-20", "2020-01-21", "2020-01-24", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-31", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-07", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-14", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-21", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-28", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-06", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-13", "2020-03-15", "2020-03-16", "2020-03-17", "2020-03-20", "2020-03-22", "2020-03-23", "2020-03-24", "2020-03-27", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-03", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-10", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-17", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-24", "2020-04-26", "2020-04-27", "2020-04-28", "2020-05-01", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-08", "2020-05-10", "2020-05-11", "2020-05-12", "2020-05-15", "2020-05-17", "2020-05-18", "2020-05-19", "2020-05-22", "2020-05-24", "2020-05-25", "2020-05-26", "2020-05-29", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-05", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-12", "2020-06-14", "2020-06-15", "2020-06-16", "2020-06-19", "2020-06-21", "2020-06-22", "2020-06-23", "2020-06-26", "2020-06-28", "2020-06-29", "2020-06-30", "2020-07-03", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-10", "2020-07-12", "2020-07-13", "2020-07-14", "2020-07-17", "2020-07-19", "2020-07-20", "2020-07-21", "2020-07-24", "2020-07-26", "2020-07-27", "2020-07-28", "2020-07-31", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-07", "2020-08-09", "2020-08-10", "2020-08-11", "2020-08-14", "2020-08-16", "2020-08-17", "2020-08-18", "2020-08-21", "2020-08-23", "2020-08-24", "2020-08-25", "2020-08-28", "2020-08-30", "2020-08-31", "2020-09-01", "2020-09-04", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-11", "2020-09-13", "2020-09-14", "2020-09-15", "2020-09-18", "2020-09-20", "2020-09-21", "2020-09-22", "2020-09-25", "2020-09-27", "2020-09-28", "2020-09-29", "2020-10-02", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-09", "2020-10-11", "2020-10-12", "2020-10-13", "2020-10-16", "2020-10-18", "2020-10-19", "2020-10-20", "2020-10-23", "2020-10-25", "2020-10-26", "2020-10-27", "2020-10-30", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-06", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-13", "2020-11-15", "2020-11-16", "2020-11-17", "2020-11-20", "2020-11-22", "2020-11-23", "2020-11-24", "2020-11-27", "2020-11-29", "2020-11-30", "2020-12-01", "2020-12-04", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-11", "2020-12-13", "2020-12-14", "2020-12-15", "2020-12-18", "2020-12-20", "2020-12-21", "2020-12-22", "2020-12-25", "2020-12-27", "2020-12-28", "2020-12-29", "2021-01-01", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-08", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-15", "2021-01-17", "2021-01-18", "2021-01-19", "2021-01-22", "2021-01-24", "2021-01-25", "2021-01-26", "2021-01-29", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-05", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-12", "2021-02-14", "2021-02-15", "2021-02-16", "2021-02-19", "2021-02-21", "2021-02-22", "2021-02-23", "2021-02-26", "2021-02-28", "2021-03-01"]).union(globalDowDates)
        var newWomDates: Set<String> = Set(["2019-01-02", "2019-01-07", "2019-01-16", "2019-01-21", "2019-01-28", "2019-01-30", "2019-02-04", "2019-02-06", "2019-02-18", "2019-02-20", "2019-02-25", "2019-02-27", "2019-03-04", "2019-03-06", "2019-03-18", "2019-03-20", "2019-03-25", "2019-03-27", "2019-04-01", "2019-04-03", "2019-04-15", "2019-04-17", "2019-04-24", "2019-04-29", "2019-05-01", "2019-05-06", "2019-05-15", "2019-05-20", "2019-05-27", "2019-05-29", "2019-06-03", "2019-06-05", "2019-06-17", "2019-06-19", "2019-06-24", "2019-06-26", "2019-07-01", "2019-07-03", "2019-07-15", "2019-07-17", "2019-07-29", "2019-07-31", "2019-08-05", "2019-08-07", "2019-08-19", "2019-08-21", "2019-08-26", "2019-08-28", "2019-09-02", "2019-09-04", "2019-09-16", "2019-09-18", "2019-09-25", "2019-09-30", "2019-10-02", "2019-10-07", "2019-10-16", "2019-10-21", "2019-10-28", "2019-10-30", "2019-11-04", "2019-11-06", "2019-11-18", "2019-11-20", "2019-11-25", "2019-11-27", "2019-12-02", "2019-12-04", "2019-12-16", "2019-12-18", "2019-12-25", "2019-12-30", "2020-01-01", "2020-01-06", "2020-01-15", "2020-01-20", "2020-01-27", "2020-01-29", "2020-02-03", "2020-02-05", "2020-02-17", "2020-02-19", "2020-02-24", "2020-02-26", "2020-03-02", "2020-03-04", "2020-03-16", "2020-03-18", "2020-03-25", "2020-03-30", "2020-04-01", "2020-04-06", "2020-04-15", "2020-04-20", "2020-04-27", "2020-04-29", "2020-05-04", "2020-05-06", "2020-05-18", "2020-05-20", "2020-05-25", "2020-05-27", "2020-06-01", "2020-06-03", "2020-06-15", "2020-06-17", "2020-06-24", "2020-06-29", "2020-07-01", "2020-07-06", "2020-07-15", "2020-07-20", "2020-07-27", "2020-07-29", "2020-08-03", "2020-08-05", "2020-08-17", "2020-08-19", "2020-08-26", "2020-08-31", "2020-09-02", "2020-09-07", "2020-09-16", "2020-09-21", "2020-09-28", "2020-09-30", "2020-10-05", "2020-10-07", "2020-10-19", "2020-10-21", "2020-10-26", "2020-10-28", "2020-11-02", "2020-11-04", "2020-11-16", "2020-11-18", "2020-11-25", "2020-11-30", "2020-12-02", "2020-12-07", "2020-12-16", "2020-12-21", "2020-12-28", "2020-12-30", "2021-01-04", "2021-01-06", "2021-01-18", "2021-01-20", "2021-01-25", "2021-01-27", "2021-02-01", "2021-02-03", "2021-02-15", "2021-02-17", "2021-02-22", "2021-02-24", "2021-03-01"]).union(globalWomDates).subtracting(newDowDates)
        var newDomDates: Set<String> = Set(["2019-01-01", "2019-01-02", "2019-01-03", "2019-01-04", "2019-01-05", "2019-01-06", "2019-01-07", "2019-01-08", "2019-01-09", "2019-01-10", "2019-01-31", "2019-02-01", "2019-02-02", "2019-02-03", "2019-02-04", "2019-02-05", "2019-02-06", "2019-02-07", "2019-02-08", "2019-02-09", "2019-02-10", "2019-02-28", "2019-03-01", "2019-03-02", "2019-03-03", "2019-03-04", "2019-03-05", "2019-03-06", "2019-03-07", "2019-03-08", "2019-03-09", "2019-03-10", "2019-03-31", "2019-04-01", "2019-04-02", "2019-04-03", "2019-04-04", "2019-04-05", "2019-04-06", "2019-04-07", "2019-04-08", "2019-04-09", "2019-04-10", "2019-04-30", "2019-05-01", "2019-05-02", "2019-05-03", "2019-05-04", "2019-05-05", "2019-05-06", "2019-05-07", "2019-05-08", "2019-05-09", "2019-05-10", "2019-05-31", "2019-06-01", "2019-06-02", "2019-06-03", "2019-06-04", "2019-06-05", "2019-06-06", "2019-06-07", "2019-06-08", "2019-06-09", "2019-06-10", "2019-06-30", "2019-07-01", "2019-07-02", "2019-07-03", "2019-07-04", "2019-07-05", "2019-07-06", "2019-07-07", "2019-07-08", "2019-07-09", "2019-07-10", "2019-07-31", "2019-08-01", "2019-08-02", "2019-08-03", "2019-08-04", "2019-08-05", "2019-08-06", "2019-08-07", "2019-08-08", "2019-08-09", "2019-08-10", "2019-08-31", "2019-09-01", "2019-09-02", "2019-09-03", "2019-09-04", "2019-09-05", "2019-09-06", "2019-09-07", "2019-09-08", "2019-09-09", "2019-09-10", "2019-09-30", "2019-10-01", "2019-10-02", "2019-10-03", "2019-10-04", "2019-10-05", "2019-10-06", "2019-10-07", "2019-10-08", "2019-10-09", "2019-10-10", "2019-10-31", "2019-11-01", "2019-11-02", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-06", "2019-11-07", "2019-11-08", "2019-11-09", "2019-11-10", "2019-11-30", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-04", "2019-12-05", "2019-12-06", "2019-12-07", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-31", "2020-01-01", "2020-01-02", "2020-01-03", "2020-01-04", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-08", "2020-01-09", "2020-01-10", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-04", "2020-03-05", "2020-03-06", "2020-03-07", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-30", "2020-05-01", "2020-05-02", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-06", "2020-05-07", "2020-05-08", "2020-05-09", "2020-05-10", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-03", "2020-06-04", "2020-06-05", "2020-06-06", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-10", "2020-06-30", "2020-07-01", "2020-07-02", "2020-07-03", "2020-07-04", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-08", "2020-07-09", "2020-07-10", "2020-07-31", "2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08", "2020-08-09", "2020-08-10", "2020-08-31", "2020-09-01", "2020-09-02", "2020-09-03", "2020-09-04", "2020-09-05", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-09", "2020-09-10", "2020-09-30", "2020-10-01", "2020-10-02", "2020-10-03", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-07", "2020-10-08", "2020-10-09", "2020-10-10", "2020-10-31", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-04", "2020-11-05", "2020-11-06", "2020-11-07", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-30", "2020-12-01", "2020-12-02", "2020-12-03", "2020-12-04", "2020-12-05", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-09", "2020-12-10", "2020-12-31", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-03", "2021-02-04", "2021-02-05", "2021-02-06", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-10", "2021-02-28", "2021-03-01"]).union(globalDomDates).subtracting(newWomDates).subtracting(newDowDates)
        let newStart = Calendar.current.date(from: DateComponents(year: 2019, month: 1, day: 1))!
        task.updateRecurringInstances(startDate: newStart, endDate: endDate)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_startDateLater() throws {
        
        var newDowDates: Set<String> = Set(["2020-02-02", "2020-02-03", "2020-02-04", "2020-02-07", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-14", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-21", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-28", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-06", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-13", "2020-03-15", "2020-03-16", "2020-03-17", "2020-03-20", "2020-03-22", "2020-03-23", "2020-03-24", "2020-03-27", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-03", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-10", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-17", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-24", "2020-04-26", "2020-04-27", "2020-04-28", "2020-05-01", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-08", "2020-05-10", "2020-05-11", "2020-05-12", "2020-05-15", "2020-05-17", "2020-05-18", "2020-05-19", "2020-05-22", "2020-05-24", "2020-05-25", "2020-05-26", "2020-05-29", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-05", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-12", "2020-06-14", "2020-06-15", "2020-06-16", "2020-06-19", "2020-06-21", "2020-06-22", "2020-06-23", "2020-06-26", "2020-06-28", "2020-06-29", "2020-06-30", "2020-07-03", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-10", "2020-07-12", "2020-07-13", "2020-07-14", "2020-07-17", "2020-07-19", "2020-07-20", "2020-07-21", "2020-07-24", "2020-07-26", "2020-07-27", "2020-07-28", "2020-07-31", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-07", "2020-08-09", "2020-08-10", "2020-08-11", "2020-08-14", "2020-08-16", "2020-08-17", "2020-08-18", "2020-08-21", "2020-08-23", "2020-08-24", "2020-08-25", "2020-08-28", "2020-08-30", "2020-08-31", "2020-09-01", "2020-09-04", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-11", "2020-09-13", "2020-09-14", "2020-09-15", "2020-09-18", "2020-09-20", "2020-09-21", "2020-09-22", "2020-09-25", "2020-09-27", "2020-09-28", "2020-09-29", "2020-10-02", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-09", "2020-10-11", "2020-10-12", "2020-10-13", "2020-10-16", "2020-10-18", "2020-10-19", "2020-10-20", "2020-10-23", "2020-10-25", "2020-10-26", "2020-10-27", "2020-10-30", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-06", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-13", "2020-11-15", "2020-11-16", "2020-11-17", "2020-11-20", "2020-11-22", "2020-11-23", "2020-11-24", "2020-11-27", "2020-11-29", "2020-11-30", "2020-12-01", "2020-12-04", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-11", "2020-12-13", "2020-12-14", "2020-12-15", "2020-12-18", "2020-12-20", "2020-12-21", "2020-12-22", "2020-12-25", "2020-12-27", "2020-12-28", "2020-12-29", "2021-01-01", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-08", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-15", "2021-01-17", "2021-01-18", "2021-01-19", "2021-01-22", "2021-01-24", "2021-01-25", "2021-01-26", "2021-01-29", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-05", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-12", "2021-02-14", "2021-02-15", "2021-02-16", "2021-02-19", "2021-02-21", "2021-02-22", "2021-02-23", "2021-02-26", "2021-02-28", "2021-03-01"]
        )
        var newWomDates: Set<String> = Set(["2020-02-03", "2020-02-05", "2020-02-17", "2020-02-19", "2020-02-24", "2020-02-26", "2020-03-02", "2020-03-04", "2020-03-16", "2020-03-18", "2020-03-25", "2020-03-30", "2020-04-01", "2020-04-06", "2020-04-15", "2020-04-20", "2020-04-27", "2020-04-29", "2020-05-04", "2020-05-06", "2020-05-18", "2020-05-20", "2020-05-25", "2020-05-27", "2020-06-01", "2020-06-03", "2020-06-15", "2020-06-17", "2020-06-24", "2020-06-29", "2020-07-01", "2020-07-06", "2020-07-15", "2020-07-20", "2020-07-27", "2020-07-29", "2020-08-03", "2020-08-05", "2020-08-17", "2020-08-19", "2020-08-26", "2020-08-31", "2020-09-02", "2020-09-07", "2020-09-16", "2020-09-21", "2020-09-28", "2020-09-30", "2020-10-05", "2020-10-07", "2020-10-19", "2020-10-21", "2020-10-26", "2020-10-28", "2020-11-02", "2020-11-04", "2020-11-16", "2020-11-18", "2020-11-25", "2020-11-30", "2020-12-02", "2020-12-07", "2020-12-16", "2020-12-21", "2020-12-28", "2020-12-30", "2021-01-04", "2021-01-06", "2021-01-18", "2021-01-20", "2021-01-25", "2021-01-27", "2021-02-01", "2021-02-03", "2021-02-15", "2021-02-17", "2021-02-22", "2021-02-24", "2021-03-01"]
        ).subtracting(newDowDates)
        var newDomDates: Set<String> = Set(["2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-04", "2020-03-05", "2020-03-06", "2020-03-07", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-30", "2020-05-01", "2020-05-02", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-06", "2020-05-07", "2020-05-08", "2020-05-09", "2020-05-10", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-03", "2020-06-04", "2020-06-05", "2020-06-06", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-10", "2020-06-30", "2020-07-01", "2020-07-02", "2020-07-03", "2020-07-04", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-08", "2020-07-09", "2020-07-10", "2020-07-31", "2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08", "2020-08-09", "2020-08-10", "2020-08-31", "2020-09-01", "2020-09-02", "2020-09-03", "2020-09-04", "2020-09-05", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-09", "2020-09-10", "2020-09-30", "2020-10-01", "2020-10-02", "2020-10-03", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-07", "2020-10-08", "2020-10-09", "2020-10-10", "2020-10-31", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-04", "2020-11-05", "2020-11-06", "2020-11-07", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-30", "2020-12-01", "2020-12-02", "2020-12-03", "2020-12-04", "2020-12-05", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-09", "2020-12-10", "2020-12-31", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-03", "2021-02-04", "2021-02-05", "2021-02-06", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-10", "2021-02-28", "2021-03-01"]
        ).subtracting(newWomDates).subtracting(newDowDates)
        let newStart = Calendar.current.date(from: DateComponents(year: 2020, month: 2, day: 1))!
        task.updateRecurringInstances(startDate: newStart, endDate: endDate)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_endDateEarlier() throws {
        
        var newDowDates: Set<String> = Set(["2019-11-01", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-08", "2019-11-10", "2019-11-11", "2019-11-12", "2019-11-15", "2019-11-17", "2019-11-18", "2019-11-19", "2019-11-22", "2019-11-24", "2019-11-25", "2019-11-26", "2019-11-29", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-06", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-13", "2019-12-15", "2019-12-16", "2019-12-17", "2019-12-20", "2019-12-22", "2019-12-23", "2019-12-24", "2019-12-27", "2019-12-29", "2019-12-30", "2019-12-31", "2020-01-03", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-10", "2020-01-12", "2020-01-13", "2020-01-14", "2020-01-17", "2020-01-19", "2020-01-20", "2020-01-21", "2020-01-24", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-31", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-07", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-14", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-21", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-28", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-06", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-13", "2020-03-15", "2020-03-16", "2020-03-17", "2020-03-20", "2020-03-22", "2020-03-23", "2020-03-24", "2020-03-27", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-03", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-10", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-17", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-24", "2020-04-26", "2020-04-27", "2020-04-28", "2020-05-01", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-08", "2020-05-10", "2020-05-11", "2020-05-12", "2020-05-15", "2020-05-17", "2020-05-18", "2020-05-19", "2020-05-22", "2020-05-24", "2020-05-25", "2020-05-26", "2020-05-29", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-05", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-12", "2020-06-14", "2020-06-15", "2020-06-16", "2020-06-19", "2020-06-21", "2020-06-22", "2020-06-23", "2020-06-26", "2020-06-28", "2020-06-29", "2020-06-30"])
        var newWomDates: Set<String> = Set(["2019-11-04", "2019-11-06", "2019-11-18", "2019-11-20", "2019-11-25", "2019-11-27", "2019-12-02", "2019-12-04", "2019-12-16", "2019-12-18", "2019-12-25", "2019-12-30", "2020-01-01", "2020-01-06", "2020-01-15", "2020-01-20", "2020-01-27", "2020-01-29", "2020-02-03", "2020-02-05", "2020-02-17", "2020-02-19", "2020-02-24", "2020-02-26", "2020-03-02", "2020-03-04", "2020-03-16", "2020-03-18", "2020-03-25", "2020-03-30", "2020-04-01", "2020-04-06", "2020-04-15", "2020-04-20", "2020-04-27", "2020-04-29", "2020-05-04", "2020-05-06", "2020-05-18", "2020-05-20", "2020-05-25", "2020-05-27", "2020-06-01", "2020-06-03", "2020-06-15", "2020-06-17", "2020-06-24", "2020-06-29"]).subtracting(newDowDates)
        var newDomDates: Set<String> = Set(["2019-11-01", "2019-11-02", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-06", "2019-11-07", "2019-11-08", "2019-11-09", "2019-11-10", "2019-11-30", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-04", "2019-12-05", "2019-12-06", "2019-12-07", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-31", "2020-01-01", "2020-01-02", "2020-01-03", "2020-01-04", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-08", "2020-01-09", "2020-01-10", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-04", "2020-03-05", "2020-03-06", "2020-03-07", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-30", "2020-05-01", "2020-05-02", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-06", "2020-05-07", "2020-05-08", "2020-05-09", "2020-05-10", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-03", "2020-06-04", "2020-06-05", "2020-06-06", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-10", "2020-06-30"]).subtracting(newWomDates).subtracting(newDowDates)
        let newEnd = Calendar.current.date(from: DateComponents(year: 2020, month: 6, day: 30))!
        task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_endDateLater() throws {
        
        var newDowDates: Set<String> = Set(["2019-11-01", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-08", "2019-11-10", "2019-11-11", "2019-11-12", "2019-11-15", "2019-11-17", "2019-11-18", "2019-11-19", "2019-11-22", "2019-11-24", "2019-11-25", "2019-11-26", "2019-11-29", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-06", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-13", "2019-12-15", "2019-12-16", "2019-12-17", "2019-12-20", "2019-12-22", "2019-12-23", "2019-12-24", "2019-12-27", "2019-12-29", "2019-12-30", "2019-12-31", "2020-01-03", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-10", "2020-01-12", "2020-01-13", "2020-01-14", "2020-01-17", "2020-01-19", "2020-01-20", "2020-01-21", "2020-01-24", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-31", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-07", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-14", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-21", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-28", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-06", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-13", "2020-03-15", "2020-03-16", "2020-03-17", "2020-03-20", "2020-03-22", "2020-03-23", "2020-03-24", "2020-03-27", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-03", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-10", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-17", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-24", "2020-04-26", "2020-04-27", "2020-04-28", "2020-05-01", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-08", "2020-05-10", "2020-05-11", "2020-05-12", "2020-05-15", "2020-05-17", "2020-05-18", "2020-05-19", "2020-05-22", "2020-05-24", "2020-05-25", "2020-05-26", "2020-05-29", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-05", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-12", "2020-06-14", "2020-06-15", "2020-06-16", "2020-06-19", "2020-06-21", "2020-06-22", "2020-06-23", "2020-06-26", "2020-06-28", "2020-06-29", "2020-06-30", "2020-07-03", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-10", "2020-07-12", "2020-07-13", "2020-07-14", "2020-07-17", "2020-07-19", "2020-07-20", "2020-07-21", "2020-07-24", "2020-07-26", "2020-07-27", "2020-07-28", "2020-07-31", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-07", "2020-08-09", "2020-08-10", "2020-08-11", "2020-08-14", "2020-08-16", "2020-08-17", "2020-08-18", "2020-08-21", "2020-08-23", "2020-08-24", "2020-08-25", "2020-08-28", "2020-08-30", "2020-08-31", "2020-09-01", "2020-09-04", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-11", "2020-09-13", "2020-09-14", "2020-09-15", "2020-09-18", "2020-09-20", "2020-09-21", "2020-09-22", "2020-09-25", "2020-09-27", "2020-09-28", "2020-09-29", "2020-10-02", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-09", "2020-10-11", "2020-10-12", "2020-10-13", "2020-10-16", "2020-10-18", "2020-10-19", "2020-10-20", "2020-10-23", "2020-10-25", "2020-10-26", "2020-10-27", "2020-10-30", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-06", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-13", "2020-11-15", "2020-11-16", "2020-11-17", "2020-11-20", "2020-11-22", "2020-11-23", "2020-11-24", "2020-11-27", "2020-11-29", "2020-11-30", "2020-12-01", "2020-12-04", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-11", "2020-12-13", "2020-12-14", "2020-12-15", "2020-12-18", "2020-12-20", "2020-12-21", "2020-12-22", "2020-12-25", "2020-12-27", "2020-12-28", "2020-12-29", "2021-01-01", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-08", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-15", "2021-01-17", "2021-01-18", "2021-01-19", "2021-01-22", "2021-01-24", "2021-01-25", "2021-01-26", "2021-01-29", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-05", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-12", "2021-02-14", "2021-02-15", "2021-02-16", "2021-02-19", "2021-02-21", "2021-02-22", "2021-02-23", "2021-02-26", "2021-02-28", "2021-03-01", "2021-03-02", "2021-03-05", "2021-03-07", "2021-03-08", "2021-03-09", "2021-03-12", "2021-03-14", "2021-03-15", "2021-03-16", "2021-03-19", "2021-03-21", "2021-03-22", "2021-03-23", "2021-03-26", "2021-03-28", "2021-03-29", "2021-03-30", "2021-04-02", "2021-04-04", "2021-04-05", "2021-04-06", "2021-04-09", "2021-04-11", "2021-04-12", "2021-04-13", "2021-04-16", "2021-04-18", "2021-04-19", "2021-04-20", "2021-04-23", "2021-04-25", "2021-04-26", "2021-04-27", "2021-04-30", "2021-05-02", "2021-05-03", "2021-05-04", "2021-05-07", "2021-05-09", "2021-05-10", "2021-05-11", "2021-05-14", "2021-05-16", "2021-05-17", "2021-05-18", "2021-05-21", "2021-05-23", "2021-05-24", "2021-05-25", "2021-05-28", "2021-05-30", "2021-05-31", "2021-06-01", "2021-06-04", "2021-06-06", "2021-06-07", "2021-06-08", "2021-06-11", "2021-06-13", "2021-06-14", "2021-06-15", "2021-06-18", "2021-06-20", "2021-06-21", "2021-06-22", "2021-06-25", "2021-06-27", "2021-06-28", "2021-06-29", "2021-07-02", "2021-07-04", "2021-07-05", "2021-07-06", "2021-07-09", "2021-07-11", "2021-07-12", "2021-07-13", "2021-07-16", "2021-07-18", "2021-07-19", "2021-07-20", "2021-07-23", "2021-07-25", "2021-07-26", "2021-07-27", "2021-07-30", "2021-08-01", "2021-08-02", "2021-08-03", "2021-08-06", "2021-08-08", "2021-08-09", "2021-08-10", "2021-08-13", "2021-08-15", "2021-08-16", "2021-08-17", "2021-08-20", "2021-08-22", "2021-08-23", "2021-08-24", "2021-08-27", "2021-08-29", "2021-08-30", "2021-08-31", "2021-09-03", "2021-09-05", "2021-09-06", "2021-09-07", "2021-09-10", "2021-09-12", "2021-09-13", "2021-09-14", "2021-09-17", "2021-09-19", "2021-09-20", "2021-09-21", "2021-09-24", "2021-09-26", "2021-09-27", "2021-09-28", "2021-10-01", "2021-10-03", "2021-10-04", "2021-10-05", "2021-10-08", "2021-10-10", "2021-10-11", "2021-10-12", "2021-10-15", "2021-10-17", "2021-10-18", "2021-10-19", "2021-10-22", "2021-10-24", "2021-10-25", "2021-10-26", "2021-10-29", "2021-10-31", "2021-11-01", "2021-11-02", "2021-11-05", "2021-11-07", "2021-11-08", "2021-11-09", "2021-11-12", "2021-11-14", "2021-11-15", "2021-11-16", "2021-11-19", "2021-11-21", "2021-11-22", "2021-11-23", "2021-11-26", "2021-11-28", "2021-11-29", "2021-11-30", "2021-12-03", "2021-12-05", "2021-12-06", "2021-12-07", "2021-12-10", "2021-12-12", "2021-12-13", "2021-12-14", "2021-12-17", "2021-12-19", "2021-12-20", "2021-12-21", "2021-12-24", "2021-12-26", "2021-12-27", "2021-12-28", "2021-12-31", "2022-01-02", "2022-01-03", "2022-01-04", "2022-01-07", "2022-01-09", "2022-01-10", "2022-01-11", "2022-01-14", "2022-01-16", "2022-01-17", "2022-01-18", "2022-01-21", "2022-01-23", "2022-01-24", "2022-01-25", "2022-01-28", "2022-01-30", "2022-01-31", "2022-02-01", "2022-02-04", "2022-02-06", "2022-02-07", "2022-02-08", "2022-02-11", "2022-02-13", "2022-02-14", "2022-02-15", "2022-02-18", "2022-02-20", "2022-02-21", "2022-02-22", "2022-02-25", "2022-02-27", "2022-02-28", "2022-03-01", "2022-03-04", "2022-03-06", "2022-03-07", "2022-03-08", "2022-03-11", "2022-03-13", "2022-03-14", "2022-03-15", "2022-03-18", "2022-03-20", "2022-03-21", "2022-03-22", "2022-03-25", "2022-03-27", "2022-03-28", "2022-03-29", "2022-04-01", "2022-04-03", "2022-04-04", "2022-04-05", "2022-04-08", "2022-04-10", "2022-04-11", "2022-04-12", "2022-04-15", "2022-04-17", "2022-04-18", "2022-04-19", "2022-04-22", "2022-04-24", "2022-04-25", "2022-04-26", "2022-04-29", "2022-05-01", "2022-05-02", "2022-05-03", "2022-05-06", "2022-05-08", "2022-05-09", "2022-05-10", "2022-05-13", "2022-05-15", "2022-05-16", "2022-05-17", "2022-05-20", "2022-05-22", "2022-05-23", "2022-05-24", "2022-05-27", "2022-05-29", "2022-05-30", "2022-05-31", "2022-06-03", "2022-06-05", "2022-06-06", "2022-06-07", "2022-06-10", "2022-06-12", "2022-06-13", "2022-06-14", "2022-06-17", "2022-06-19", "2022-06-20", "2022-06-21", "2022-06-24", "2022-06-26", "2022-06-27", "2022-06-28", "2022-07-01", "2022-07-03", "2022-07-04", "2022-07-05", "2022-07-08", "2022-07-10", "2022-07-11", "2022-07-12", "2022-07-15", "2022-07-17", "2022-07-18", "2022-07-19", "2022-07-22", "2022-07-24", "2022-07-25", "2022-07-26", "2022-07-29", "2022-07-31", "2022-08-01", "2022-08-02", "2022-08-05", "2022-08-07", "2022-08-08", "2022-08-09", "2022-08-12", "2022-08-14", "2022-08-15", "2022-08-16", "2022-08-19", "2022-08-21", "2022-08-22", "2022-08-23", "2022-08-26", "2022-08-28", "2022-08-29", "2022-08-30"]
        ).union(globalDowDates)
        var newWomDates: Set<String> = Set(["2019-11-04", "2019-11-06", "2019-11-18", "2019-11-20", "2019-11-25", "2019-11-27", "2019-12-02", "2019-12-04", "2019-12-16", "2019-12-18", "2019-12-25", "2019-12-30", "2020-01-01", "2020-01-06", "2020-01-15", "2020-01-20", "2020-01-27", "2020-01-29", "2020-02-03", "2020-02-05", "2020-02-17", "2020-02-19", "2020-02-24", "2020-02-26", "2020-03-02", "2020-03-04", "2020-03-16", "2020-03-18", "2020-03-25", "2020-03-30", "2020-04-01", "2020-04-06", "2020-04-15", "2020-04-20", "2020-04-27", "2020-04-29", "2020-05-04", "2020-05-06", "2020-05-18", "2020-05-20", "2020-05-25", "2020-05-27", "2020-06-01", "2020-06-03", "2020-06-15", "2020-06-17", "2020-06-24", "2020-06-29", "2020-07-01", "2020-07-06", "2020-07-15", "2020-07-20", "2020-07-27", "2020-07-29", "2020-08-03", "2020-08-05", "2020-08-17", "2020-08-19", "2020-08-26", "2020-08-31", "2020-09-02", "2020-09-07", "2020-09-16", "2020-09-21", "2020-09-28", "2020-09-30", "2020-10-05", "2020-10-07", "2020-10-19", "2020-10-21", "2020-10-26", "2020-10-28", "2020-11-02", "2020-11-04", "2020-11-16", "2020-11-18", "2020-11-25", "2020-11-30", "2020-12-02", "2020-12-07", "2020-12-16", "2020-12-21", "2020-12-28", "2020-12-30", "2021-01-04", "2021-01-06", "2021-01-18", "2021-01-20", "2021-01-25", "2021-01-27", "2021-02-01", "2021-02-03", "2021-02-15", "2021-02-17", "2021-02-22", "2021-02-24", "2021-03-01", "2021-03-03", "2021-03-15", "2021-03-17", "2021-03-29", "2021-03-31", "2021-04-05", "2021-04-07", "2021-04-19", "2021-04-21", "2021-04-26", "2021-04-28", "2021-05-03", "2021-05-05", "2021-05-17", "2021-05-19", "2021-05-26", "2021-05-31", "2021-06-02", "2021-06-07", "2021-06-16", "2021-06-21", "2021-06-28", "2021-06-30", "2021-07-05", "2021-07-07", "2021-07-19", "2021-07-21", "2021-07-26", "2021-07-28", "2021-08-02", "2021-08-04", "2021-08-16", "2021-08-18", "2021-08-25", "2021-08-30", "2021-09-01", "2021-09-06", "2021-09-15", "2021-09-20", "2021-09-27", "2021-09-29", "2021-10-04", "2021-10-06", "2021-10-18", "2021-10-20", "2021-10-25", "2021-10-27", "2021-11-01", "2021-11-03", "2021-11-15", "2021-11-17", "2021-11-24", "2021-11-29", "2021-12-01", "2021-12-06", "2021-12-15", "2021-12-20", "2021-12-27", "2021-12-29", "2022-01-03", "2022-01-05", "2022-01-17", "2022-01-19", "2022-01-26", "2022-01-31", "2022-02-02", "2022-02-07", "2022-02-16", "2022-02-21", "2022-02-23", "2022-02-28", "2022-03-02", "2022-03-07", "2022-03-16", "2022-03-21", "2022-03-28", "2022-03-30", "2022-04-04", "2022-04-06", "2022-04-18", "2022-04-20", "2022-04-25", "2022-04-27", "2022-05-02", "2022-05-04", "2022-05-16", "2022-05-18", "2022-05-25", "2022-05-30", "2022-06-01", "2022-06-06", "2022-06-15", "2022-06-20", "2022-06-27", "2022-06-29", "2022-07-04", "2022-07-06", "2022-07-18", "2022-07-20", "2022-07-25", "2022-07-27", "2022-08-01", "2022-08-03", "2022-08-15", "2022-08-17", "2022-08-29", "2022-08-31"]
        ).union(globalWomDates).subtracting(newDowDates)
        var newDomDates: Set<String> = Set(["2019-11-01", "2019-11-02", "2019-11-03", "2019-11-04", "2019-11-05", "2019-11-06", "2019-11-07", "2019-11-08", "2019-11-09", "2019-11-10", "2019-11-30", "2019-12-01", "2019-12-02", "2019-12-03", "2019-12-04", "2019-12-05", "2019-12-06", "2019-12-07", "2019-12-08", "2019-12-09", "2019-12-10", "2019-12-31", "2020-01-01", "2020-01-02", "2020-01-03", "2020-01-04", "2020-01-05", "2020-01-06", "2020-01-07", "2020-01-08", "2020-01-09", "2020-01-10", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03", "2020-03-04", "2020-03-05", "2020-03-06", "2020-03-07", "2020-03-08", "2020-03-09", "2020-03-10", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-30", "2020-05-01", "2020-05-02", "2020-05-03", "2020-05-04", "2020-05-05", "2020-05-06", "2020-05-07", "2020-05-08", "2020-05-09", "2020-05-10", "2020-05-31", "2020-06-01", "2020-06-02", "2020-06-03", "2020-06-04", "2020-06-05", "2020-06-06", "2020-06-07", "2020-06-08", "2020-06-09", "2020-06-10", "2020-06-30", "2020-07-01", "2020-07-02", "2020-07-03", "2020-07-04", "2020-07-05", "2020-07-06", "2020-07-07", "2020-07-08", "2020-07-09", "2020-07-10", "2020-07-31", "2020-08-01", "2020-08-02", "2020-08-03", "2020-08-04", "2020-08-05", "2020-08-06", "2020-08-07", "2020-08-08", "2020-08-09", "2020-08-10", "2020-08-31", "2020-09-01", "2020-09-02", "2020-09-03", "2020-09-04", "2020-09-05", "2020-09-06", "2020-09-07", "2020-09-08", "2020-09-09", "2020-09-10", "2020-09-30", "2020-10-01", "2020-10-02", "2020-10-03", "2020-10-04", "2020-10-05", "2020-10-06", "2020-10-07", "2020-10-08", "2020-10-09", "2020-10-10", "2020-10-31", "2020-11-01", "2020-11-02", "2020-11-03", "2020-11-04", "2020-11-05", "2020-11-06", "2020-11-07", "2020-11-08", "2020-11-09", "2020-11-10", "2020-11-30", "2020-12-01", "2020-12-02", "2020-12-03", "2020-12-04", "2020-12-05", "2020-12-06", "2020-12-07", "2020-12-08", "2020-12-09", "2020-12-10", "2020-12-31", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-31", "2021-02-01", "2021-02-02", "2021-02-03", "2021-02-04", "2021-02-05", "2021-02-06", "2021-02-07", "2021-02-08", "2021-02-09", "2021-02-10", "2021-02-28", "2021-03-01", "2021-03-02", "2021-03-03", "2021-03-04", "2021-03-05", "2021-03-06", "2021-03-07", "2021-03-08", "2021-03-09", "2021-03-10", "2021-03-31", "2021-04-01", "2021-04-02", "2021-04-03", "2021-04-04", "2021-04-05", "2021-04-06", "2021-04-07", "2021-04-08", "2021-04-09", "2021-04-10", "2021-04-30", "2021-05-01", "2021-05-02", "2021-05-03", "2021-05-04", "2021-05-05", "2021-05-06", "2021-05-07", "2021-05-08", "2021-05-09", "2021-05-10", "2021-05-31", "2021-06-01", "2021-06-02", "2021-06-03", "2021-06-04", "2021-06-05", "2021-06-06", "2021-06-07", "2021-06-08", "2021-06-09", "2021-06-10", "2021-06-30", "2021-07-01", "2021-07-02", "2021-07-03", "2021-07-04", "2021-07-05", "2021-07-06", "2021-07-07", "2021-07-08", "2021-07-09", "2021-07-10", "2021-07-31", "2021-08-01", "2021-08-02", "2021-08-03", "2021-08-04", "2021-08-05", "2021-08-06", "2021-08-07", "2021-08-08", "2021-08-09", "2021-08-10", "2021-08-31", "2021-09-01", "2021-09-02", "2021-09-03", "2021-09-04", "2021-09-05", "2021-09-06", "2021-09-07", "2021-09-08", "2021-09-09", "2021-09-10", "2021-09-30", "2021-10-01", "2021-10-02", "2021-10-03", "2021-10-04", "2021-10-05", "2021-10-06", "2021-10-07", "2021-10-08", "2021-10-09", "2021-10-10", "2021-10-31", "2021-11-01", "2021-11-02", "2021-11-03", "2021-11-04", "2021-11-05", "2021-11-06", "2021-11-07", "2021-11-08", "2021-11-09", "2021-11-10", "2021-11-30", "2021-12-01", "2021-12-02", "2021-12-03", "2021-12-04", "2021-12-05", "2021-12-06", "2021-12-07", "2021-12-08", "2021-12-09", "2021-12-10", "2021-12-31", "2022-01-01", "2022-01-02", "2022-01-03", "2022-01-04", "2022-01-05", "2022-01-06", "2022-01-07", "2022-01-08", "2022-01-09", "2022-01-10", "2022-01-31", "2022-02-01", "2022-02-02", "2022-02-03", "2022-02-04", "2022-02-05", "2022-02-06", "2022-02-07", "2022-02-08", "2022-02-09", "2022-02-10", "2022-02-28", "2022-03-01", "2022-03-02", "2022-03-03", "2022-03-04", "2022-03-05", "2022-03-06", "2022-03-07", "2022-03-08", "2022-03-09", "2022-03-10", "2022-03-31", "2022-04-01", "2022-04-02", "2022-04-03", "2022-04-04", "2022-04-05", "2022-04-06", "2022-04-07", "2022-04-08", "2022-04-09", "2022-04-10", "2022-04-30", "2022-05-01", "2022-05-02", "2022-05-03", "2022-05-04", "2022-05-05", "2022-05-06", "2022-05-07", "2022-05-08", "2022-05-09", "2022-05-10", "2022-05-31", "2022-06-01", "2022-06-02", "2022-06-03", "2022-06-04", "2022-06-05", "2022-06-06", "2022-06-07", "2022-06-08", "2022-06-09", "2022-06-10", "2022-06-30", "2022-07-01", "2022-07-02", "2022-07-03", "2022-07-04", "2022-07-05", "2022-07-06", "2022-07-07", "2022-07-08", "2022-07-09", "2022-07-10", "2022-07-31", "2022-08-01", "2022-08-02", "2022-08-03", "2022-08-04", "2022-08-05", "2022-08-06", "2022-08-07", "2022-08-08", "2022-08-09", "2022-08-10", "2022-08-31", "2022-09-01"]
        ).union(globalDomDates).subtracting(newWomDates).subtracting(newDowDates)
        let newEnd = Calendar.current.date(from: DateComponents(year: 2022, month: 9, day: 1))!
        task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    // MARK: - Basic tests using global TTSes
    
    func test_updateRecurringInstances_globalDow() throws {
        
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc)))
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        var expectedDowDates = globalDowDates
        
        for instance in instances {
            if expectedDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                expectedDowDates.remove(instance.date!)
            }
        }
        
        XCTAssert(expectedDowDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_globalWom() throws {
        
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc)))
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        var expectedWomDates = globalWomDates
        
        for instance in instances {
            if expectedWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                expectedWomDates.remove(instance.date!)
            }
        }
        
        XCTAssert(expectedWomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_globalDom() throws {
        
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: Set(arrayLiteral: getDomTargetSet(CDCoordinator.moc)))
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        var expectedDomDates = globalDomDates
        
        for instance in instances {
            if expectedDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                expectedDomDates.remove(instance.date!)
            }
        }
        
        XCTAssert(expectedDomDates.count == 0)
        
    }
    
    // MARK: - TTS deletion tests
    
    func test_updateRecurringInstances_deleteDow() throws {
        
        var newWomDates: Set<String> = globalWomDates
        var newDomDates: Set<String> = globalDomDates.subtracting(newWomDates)
        let newTargetSets = Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc))
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_deleteWom() throws {
        
        var newDowDates: Set<String> = globalDowDates
        var newDomDates: Set<String> = globalDomDates.subtracting(newDowDates)
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc))
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: newTargetSets)
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                newDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_deleteDom() throws {
        
        var newDowDates: Set<String> = globalDowDates
        var newWomDates: Set<String> = globalWomDates.subtracting(newDowDates)
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc))
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: newTargetSets)
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                newWomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        
    }
    
    func test_updateRecurringInstances_deleteAllTargetSets() throws {
        
        let newTargetSets: Set<TaskTargetSet> = []
        task.updateRecurringInstances(startDate: startDate,
                                      endDate: endDate,
                                      targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        let instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
    }
    
    // MARK: - TTS addition tests
    
    /**
     Add a new .dow TaskTargetSet
     TaskTargetSets by priority = [newDow, oldDow, oldWom, oldDom]
     */
    func test_updateRecurringInstances_addHighPriorityDow() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 0,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        var newDowDates: Set<String> = Set(["2019-11-04", "2019-11-11", "2019-11-18", "2019-11-25", "2019-12-02", "2019-12-09", "2019-12-16", "2019-12-23", "2019-12-30", "2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28", "2021-01-04", "2021-01-11", "2021-01-18", "2021-01-25", "2021-02-01", "2021-02-08", "2021-02-15", "2021-02-22", "2021-03-01"]
        )
        var oldDowDates: Set<String> = globalDowDates.subtracting(newDowDates)
        var oldWomDates: Set<String> = globalWomDates.subtracting(oldDowDates).subtracting(newDowDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(oldWomDates).subtracting(oldDowDates).subtracting(newDowDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc), newDowSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    /**
     Add a new .dow TaskTargetSet
     TaskTargetSets by priority = [oldDow, newDow, oldWom, oldDom]
     */
    func test_updateRecurringInstances_addSecondPriorityDow() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 4,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        
        var oldDowDates: Set<String> = globalDowDates
        var newDowDates: Set<String> = Set(["2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28"]
        ).subtracting(oldDowDates)
        var oldWomDates: Set<String> = globalWomDates.subtracting(newDowDates).subtracting(oldDowDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(oldWomDates).subtracting(newDowDates).subtracting(oldDowDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc), newDowSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    /**
     Add a new .dow TaskTargetSet
     TaskTargetSets by priority = [oldDow, oldWom, newDow, oldDom]
     */
    func test_updateRecurringInstances_addThirdPriorityDow() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 7,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        
        var oldDowDates: Set<String> = globalDowDates
        var oldWomDates: Set<String> = globalWomDates.subtracting(oldDowDates)
        var newDowDates: Set<String> = Set(["2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28"]
        ).subtracting(oldWomDates).subtracting(oldDowDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(newDowDates).subtracting(oldWomDates).subtracting(oldDowDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc), newDowSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    /**
     Add a new .dow TaskTargetSet at lowest priority
     TaskTargetSets by priority = [oldDow, oldWom, oldDom, newDow]
     */
    func test_updateRecurringInstances_addLowPriorityDow() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 7,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        
        var oldDowDates: Set<String> = globalDowDates
        var oldWomDates: Set<String> = globalWomDates.subtracting(oldDowDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(oldWomDates).subtracting(oldDowDates)
        var newDowDates: Set<String> = Set(["2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28"]
        ).subtracting(oldDomDates).subtracting(oldWomDates).subtracting(oldDowDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc), getDomTargetSet(CDCoordinator.moc), newDowSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    /**
     Add new .dom, .wom, and .dow TaskTargetSets
     TaskTargetSets by priority = [newDom, oldDow, newWom, oldWom, newDow, oldDom]
     */
    func test_updateRecurringInstances_addDomWomDowHigh() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100; let newWomMin = womMin + 100; let newWomMax = womMax + 100; let newDomMin = domMin + 100; let newDomMax = domMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 7,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        let newWomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newWomMin, max: newWomMax, minOperator: 1, maxOperator: 1, priority: 4,
                                      pattern: DayPattern(dow: Set([2,6]), wom: Set([1,3,5]), dom: Set()))
        let newDomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDomMin, max: newDomMax, minOperator: 1, maxOperator: 1, priority: 0,
                                      pattern: DayPattern(dow: Set(), wom: Set(), dom: Set([3,6,9,12,15,18,21,24,27,30])))
        
        var newDomDates: Set<String> = Set(["2019-11-03", "2019-11-06", "2019-11-09", "2019-11-12", "2019-11-15", "2019-11-18", "2019-11-21", "2019-11-24", "2019-11-27", "2019-11-30", "2019-12-03", "2019-12-06", "2019-12-09", "2019-12-12", "2019-12-15", "2019-12-18", "2019-12-21", "2019-12-24", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-09", "2020-01-12", "2020-01-15", "2020-01-18", "2020-01-21", "2020-01-24", "2020-01-27", "2020-01-30", "2020-02-03", "2020-02-06", "2020-02-09", "2020-02-12", "2020-02-15", "2020-02-18", "2020-02-21", "2020-02-24", "2020-02-27", "2020-03-03", "2020-03-06", "2020-03-09", "2020-03-12", "2020-03-15", "2020-03-18", "2020-03-21", "2020-03-24", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-09", "2020-04-12", "2020-04-15", "2020-04-18", "2020-04-21", "2020-04-24", "2020-04-27", "2020-04-30", "2020-05-03", "2020-05-06", "2020-05-09", "2020-05-12", "2020-05-15", "2020-05-18", "2020-05-21", "2020-05-24", "2020-05-27", "2020-05-30", "2020-06-03", "2020-06-06", "2020-06-09", "2020-06-12", "2020-06-15", "2020-06-18", "2020-06-21", "2020-06-24", "2020-06-27", "2020-06-30", "2020-07-03", "2020-07-06", "2020-07-09", "2020-07-12", "2020-07-15", "2020-07-18", "2020-07-21", "2020-07-24", "2020-07-27", "2020-07-30", "2020-08-03", "2020-08-06", "2020-08-09", "2020-08-12", "2020-08-15", "2020-08-18", "2020-08-21", "2020-08-24", "2020-08-27", "2020-08-30", "2020-09-03", "2020-09-06", "2020-09-09", "2020-09-12", "2020-09-15", "2020-09-18", "2020-09-21", "2020-09-24", "2020-09-27", "2020-09-30", "2020-10-03", "2020-10-06", "2020-10-09", "2020-10-12", "2020-10-15", "2020-10-18", "2020-10-21", "2020-10-24", "2020-10-27", "2020-10-30", "2020-11-03", "2020-11-06", "2020-11-09", "2020-11-12", "2020-11-15", "2020-11-18", "2020-11-21", "2020-11-24", "2020-11-27", "2020-11-30", "2020-12-03", "2020-12-06", "2020-12-09", "2020-12-12", "2020-12-15", "2020-12-18", "2020-12-21", "2020-12-24", "2020-12-27", "2020-12-30", "2021-01-03", "2021-01-06", "2021-01-09", "2021-01-12", "2021-01-15", "2021-01-18", "2021-01-21", "2021-01-24", "2021-01-27", "2021-01-30", "2021-02-03", "2021-02-06", "2021-02-09", "2021-02-12", "2021-02-15", "2021-02-18", "2021-02-21", "2021-02-24", "2021-02-27"]
        )
        var oldDowDates: Set<String> = globalDowDates.subtracting(newDomDates)
        var newWomDates: Set<String> = Set(["2019-11-01", "2019-11-04", "2019-11-15", "2019-11-18", "2019-11-25", "2019-11-29", "2019-12-02", "2019-12-06", "2019-12-16", "2019-12-20", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-17", "2020-01-20", "2020-01-27", "2020-01-31", "2020-02-03", "2020-02-07", "2020-02-17", "2020-02-21", "2020-02-24", "2020-02-28", "2020-03-02", "2020-03-06", "2020-03-16", "2020-03-20", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-17", "2020-04-20", "2020-04-24", "2020-04-27", "2020-05-01", "2020-05-04", "2020-05-15", "2020-05-18", "2020-05-25", "2020-05-29", "2020-06-01", "2020-06-05", "2020-06-15", "2020-06-19", "2020-06-26", "2020-06-29", "2020-07-03", "2020-07-06", "2020-07-17", "2020-07-20", "2020-07-27", "2020-07-31", "2020-08-03", "2020-08-07", "2020-08-17", "2020-08-21", "2020-08-28", "2020-08-31", "2020-09-04", "2020-09-07", "2020-09-18", "2020-09-21", "2020-09-25", "2020-09-28", "2020-10-02", "2020-10-05", "2020-10-16", "2020-10-19", "2020-10-26", "2020-10-30", "2020-11-02", "2020-11-06", "2020-11-16", "2020-11-20", "2020-11-27", "2020-11-30", "2020-12-04", "2020-12-07", "2020-12-18", "2020-12-21", "2020-12-25", "2020-12-28", "2021-01-01", "2021-01-04", "2021-01-15", "2021-01-18", "2021-01-25", "2021-01-29", "2021-02-01", "2021-02-05", "2021-02-15", "2021-02-19", "2021-02-22", "2021-02-26", "2021-03-01"]
        ).subtracting(oldDowDates).subtracting(newDomDates)
        var oldWomDates: Set<String> = globalWomDates.subtracting(newWomDates).subtracting(oldDowDates).subtracting(newDomDates)
        var newDowDates: Set<String> = Set(["2019-11-04", "2019-11-11", "2019-11-18", "2019-11-25", "2019-12-02", "2019-12-09", "2019-12-16", "2019-12-23", "2019-12-30", "2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28", "2021-01-04", "2021-01-11", "2021-01-18", "2021-01-25", "2021-02-01", "2021-02-08", "2021-02-15", "2021-02-22", "2021-03-01"]
        ).subtracting(oldWomDates).subtracting(newWomDates).subtracting(oldDowDates).subtracting(newDomDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(newDowDates).subtracting(oldWomDates).subtracting(newWomDates).subtracting(oldDowDates).subtracting(newDomDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc),getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc),newDowSet,newWomSet,newDomSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newWomMin) && instance.targetSet!.getMax == Float(newWomMax))
                newWomDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDomMin) && instance.targetSet!.getMax == Float(newDomMax))
                newDomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    /**
     Add new .wom, .dow, and .dom TaskTargetSets
     TaskTargetSets by priority = [newWom, oldDow, newDow, oldWom, newDom, oldDom]
     */
    func test_updateRecurringInstances_addWomDowDomHigh() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100; let newWomMin = womMin + 100; let newWomMax = womMax + 100; let newDomMin = domMin + 100; let newDomMax = domMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 4,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        let newWomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newWomMin, max: newWomMax, minOperator: 1, maxOperator: 1, priority: 0,
                                      pattern: DayPattern(dow: Set([2,6]), wom: Set([1,3,5]), dom: Set()))
        let newDomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDomMin, max: newDomMax, minOperator: 1, maxOperator: 1, priority: 7,
                                      pattern: DayPattern(dow: Set(), wom: Set(), dom: Set([3,6,9,12,15,18,21,24,27,30])))
        
        var newWomDates: Set<String> = Set(["2019-11-01", "2019-11-04", "2019-11-15", "2019-11-18", "2019-11-25", "2019-11-29", "2019-12-02", "2019-12-06", "2019-12-16", "2019-12-20", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-17", "2020-01-20", "2020-01-27", "2020-01-31", "2020-02-03", "2020-02-07", "2020-02-17", "2020-02-21", "2020-02-24", "2020-02-28", "2020-03-02", "2020-03-06", "2020-03-16", "2020-03-20", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-17", "2020-04-20", "2020-04-24", "2020-04-27", "2020-05-01", "2020-05-04", "2020-05-15", "2020-05-18", "2020-05-25", "2020-05-29", "2020-06-01", "2020-06-05", "2020-06-15", "2020-06-19", "2020-06-26", "2020-06-29", "2020-07-03", "2020-07-06", "2020-07-17", "2020-07-20", "2020-07-27", "2020-07-31", "2020-08-03", "2020-08-07", "2020-08-17", "2020-08-21", "2020-08-28", "2020-08-31", "2020-09-04", "2020-09-07", "2020-09-18", "2020-09-21", "2020-09-25", "2020-09-28", "2020-10-02", "2020-10-05", "2020-10-16", "2020-10-19", "2020-10-26", "2020-10-30", "2020-11-02", "2020-11-06", "2020-11-16", "2020-11-20", "2020-11-27", "2020-11-30", "2020-12-04", "2020-12-07", "2020-12-18", "2020-12-21", "2020-12-25", "2020-12-28", "2021-01-01", "2021-01-04", "2021-01-15", "2021-01-18", "2021-01-25", "2021-01-29", "2021-02-01", "2021-02-05", "2021-02-15", "2021-02-19", "2021-02-22", "2021-02-26", "2021-03-01"]
        )
        var oldDowDates: Set<String> = globalDowDates.subtracting(newWomDates)
        var newDowDates: Set<String> = Set(["2019-11-04", "2019-11-11", "2019-11-18", "2019-11-25", "2019-12-02", "2019-12-09", "2019-12-16", "2019-12-23", "2019-12-30", "2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28", "2021-01-04", "2021-01-11", "2021-01-18", "2021-01-25", "2021-02-01", "2021-02-08", "2021-02-15", "2021-02-22", "2021-03-01"]
        ).subtracting(oldDowDates).subtracting(newWomDates)
        var oldWomDates: Set<String> = globalWomDates.subtracting(newDowDates).subtracting(oldDowDates).subtracting(newWomDates)
        var newDomDates: Set<String> = Set(["2019-11-03", "2019-11-06", "2019-11-09", "2019-11-12", "2019-11-15", "2019-11-18", "2019-11-21", "2019-11-24", "2019-11-27", "2019-11-30", "2019-12-03", "2019-12-06", "2019-12-09", "2019-12-12", "2019-12-15", "2019-12-18", "2019-12-21", "2019-12-24", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-09", "2020-01-12", "2020-01-15", "2020-01-18", "2020-01-21", "2020-01-24", "2020-01-27", "2020-01-30", "2020-02-03", "2020-02-06", "2020-02-09", "2020-02-12", "2020-02-15", "2020-02-18", "2020-02-21", "2020-02-24", "2020-02-27", "2020-03-03", "2020-03-06", "2020-03-09", "2020-03-12", "2020-03-15", "2020-03-18", "2020-03-21", "2020-03-24", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-09", "2020-04-12", "2020-04-15", "2020-04-18", "2020-04-21", "2020-04-24", "2020-04-27", "2020-04-30", "2020-05-03", "2020-05-06", "2020-05-09", "2020-05-12", "2020-05-15", "2020-05-18", "2020-05-21", "2020-05-24", "2020-05-27", "2020-05-30", "2020-06-03", "2020-06-06", "2020-06-09", "2020-06-12", "2020-06-15", "2020-06-18", "2020-06-21", "2020-06-24", "2020-06-27", "2020-06-30", "2020-07-03", "2020-07-06", "2020-07-09", "2020-07-12", "2020-07-15", "2020-07-18", "2020-07-21", "2020-07-24", "2020-07-27", "2020-07-30", "2020-08-03", "2020-08-06", "2020-08-09", "2020-08-12", "2020-08-15", "2020-08-18", "2020-08-21", "2020-08-24", "2020-08-27", "2020-08-30", "2020-09-03", "2020-09-06", "2020-09-09", "2020-09-12", "2020-09-15", "2020-09-18", "2020-09-21", "2020-09-24", "2020-09-27", "2020-09-30", "2020-10-03", "2020-10-06", "2020-10-09", "2020-10-12", "2020-10-15", "2020-10-18", "2020-10-21", "2020-10-24", "2020-10-27", "2020-10-30", "2020-11-03", "2020-11-06", "2020-11-09", "2020-11-12", "2020-11-15", "2020-11-18", "2020-11-21", "2020-11-24", "2020-11-27", "2020-11-30", "2020-12-03", "2020-12-06", "2020-12-09", "2020-12-12", "2020-12-15", "2020-12-18", "2020-12-21", "2020-12-24", "2020-12-27", "2020-12-30", "2021-01-03", "2021-01-06", "2021-01-09", "2021-01-12", "2021-01-15", "2021-01-18", "2021-01-21", "2021-01-24", "2021-01-27", "2021-01-30", "2021-02-03", "2021-02-06", "2021-02-09", "2021-02-12", "2021-02-15", "2021-02-18", "2021-02-21", "2021-02-24", "2021-02-27"]
        ).subtracting(oldWomDates).subtracting(newDowDates).subtracting(oldDowDates).subtracting(newWomDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(newDomDates).subtracting(oldWomDates).subtracting(newDowDates).subtracting(oldDowDates).subtracting(newWomDates)
        
        let newTargetSets = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc),getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc),newDowSet,newWomSet,newDomSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if oldDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(dowMin) && instance.targetSet!.getMax == Float(dowMax))
                oldDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newWomMin) && instance.targetSet!.getMax == Float(newWomMax))
                newWomDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDomMin) && instance.targetSet!.getMax == Float(newDomMax))
                newDomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        
        XCTAssert(oldDowDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
    // MARK: - TTS addition and deletion tests
    
    /**
     Delete the existing .dow TaskTargetSets and add new .wom, .dow, and .dom TaskTargetSets
     TaskTargetSets by priority = [newWom, newDow, oldWom, newDom, oldDom]
     */
    func test_updateRecurringInstances_addWomDowDom_deleteDow() throws {
        
        let newDowMin = dowMin + 100; let newDowMax = dowMax + 100; let newWomMin = womMin + 100; let newWomMax = womMax + 100; let newDomMin = domMin + 100; let newDomMax = domMax + 100
        let newDowSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDowMin, max: newDowMax, minOperator: 1, maxOperator: 1, priority: 1,
                                      pattern: DayPattern(dow: Set([2]), wom: Set(), dom: Set()))
        let newWomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newWomMin, max: newWomMax, minOperator: 1, maxOperator: 1, priority: 0,
                                      pattern: DayPattern(dow: Set([2,6]), wom: Set([1,3,5]), dom: Set()))
        let newDomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: newDomMin, max: newDomMax, minOperator: 1, maxOperator: 1, priority: 7,
                                      pattern: DayPattern(dow: Set(), wom: Set(), dom: Set([3,6,9,12,15,18,21,24,27,30])))
        
        var newWomDates: Set<String> = Set(["2019-11-01", "2019-11-04", "2019-11-15", "2019-11-18", "2019-11-25", "2019-11-29", "2019-12-02", "2019-12-06", "2019-12-16", "2019-12-20", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-17", "2020-01-20", "2020-01-27", "2020-01-31", "2020-02-03", "2020-02-07", "2020-02-17", "2020-02-21", "2020-02-24", "2020-02-28", "2020-03-02", "2020-03-06", "2020-03-16", "2020-03-20", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-17", "2020-04-20", "2020-04-24", "2020-04-27", "2020-05-01", "2020-05-04", "2020-05-15", "2020-05-18", "2020-05-25", "2020-05-29", "2020-06-01", "2020-06-05", "2020-06-15", "2020-06-19", "2020-06-26", "2020-06-29", "2020-07-03", "2020-07-06", "2020-07-17", "2020-07-20", "2020-07-27", "2020-07-31", "2020-08-03", "2020-08-07", "2020-08-17", "2020-08-21", "2020-08-28", "2020-08-31", "2020-09-04", "2020-09-07", "2020-09-18", "2020-09-21", "2020-09-25", "2020-09-28", "2020-10-02", "2020-10-05", "2020-10-16", "2020-10-19", "2020-10-26", "2020-10-30", "2020-11-02", "2020-11-06", "2020-11-16", "2020-11-20", "2020-11-27", "2020-11-30", "2020-12-04", "2020-12-07", "2020-12-18", "2020-12-21", "2020-12-25", "2020-12-28", "2021-01-01", "2021-01-04", "2021-01-15", "2021-01-18", "2021-01-25", "2021-01-29", "2021-02-01", "2021-02-05", "2021-02-15", "2021-02-19", "2021-02-22", "2021-02-26", "2021-03-01"]
        )
        var newDowDates: Set<String> = Set(["2019-11-04", "2019-11-11", "2019-11-18", "2019-11-25", "2019-12-02", "2019-12-09", "2019-12-16", "2019-12-23", "2019-12-30", "2020-01-06", "2020-01-13", "2020-01-20", "2020-01-27", "2020-02-03", "2020-02-10", "2020-02-17", "2020-02-24", "2020-03-02", "2020-03-09", "2020-03-16", "2020-03-23", "2020-03-30", "2020-04-06", "2020-04-13", "2020-04-20", "2020-04-27", "2020-05-04", "2020-05-11", "2020-05-18", "2020-05-25", "2020-06-01", "2020-06-08", "2020-06-15", "2020-06-22", "2020-06-29", "2020-07-06", "2020-07-13", "2020-07-20", "2020-07-27", "2020-08-03", "2020-08-10", "2020-08-17", "2020-08-24", "2020-08-31", "2020-09-07", "2020-09-14", "2020-09-21", "2020-09-28", "2020-10-05", "2020-10-12", "2020-10-19", "2020-10-26", "2020-11-02", "2020-11-09", "2020-11-16", "2020-11-23", "2020-11-30", "2020-12-07", "2020-12-14", "2020-12-21", "2020-12-28", "2021-01-04", "2021-01-11", "2021-01-18", "2021-01-25", "2021-02-01", "2021-02-08", "2021-02-15", "2021-02-22", "2021-03-01"]
        ).subtracting(newWomDates)
        var oldWomDates: Set<String> = globalWomDates.subtracting(newDowDates).subtracting(newWomDates)
        var newDomDates: Set<String> = Set(["2019-11-03", "2019-11-06", "2019-11-09", "2019-11-12", "2019-11-15", "2019-11-18", "2019-11-21", "2019-11-24", "2019-11-27", "2019-11-30", "2019-12-03", "2019-12-06", "2019-12-09", "2019-12-12", "2019-12-15", "2019-12-18", "2019-12-21", "2019-12-24", "2019-12-27", "2019-12-30", "2020-01-03", "2020-01-06", "2020-01-09", "2020-01-12", "2020-01-15", "2020-01-18", "2020-01-21", "2020-01-24", "2020-01-27", "2020-01-30", "2020-02-03", "2020-02-06", "2020-02-09", "2020-02-12", "2020-02-15", "2020-02-18", "2020-02-21", "2020-02-24", "2020-02-27", "2020-03-03", "2020-03-06", "2020-03-09", "2020-03-12", "2020-03-15", "2020-03-18", "2020-03-21", "2020-03-24", "2020-03-27", "2020-03-30", "2020-04-03", "2020-04-06", "2020-04-09", "2020-04-12", "2020-04-15", "2020-04-18", "2020-04-21", "2020-04-24", "2020-04-27", "2020-04-30", "2020-05-03", "2020-05-06", "2020-05-09", "2020-05-12", "2020-05-15", "2020-05-18", "2020-05-21", "2020-05-24", "2020-05-27", "2020-05-30", "2020-06-03", "2020-06-06", "2020-06-09", "2020-06-12", "2020-06-15", "2020-06-18", "2020-06-21", "2020-06-24", "2020-06-27", "2020-06-30", "2020-07-03", "2020-07-06", "2020-07-09", "2020-07-12", "2020-07-15", "2020-07-18", "2020-07-21", "2020-07-24", "2020-07-27", "2020-07-30", "2020-08-03", "2020-08-06", "2020-08-09", "2020-08-12", "2020-08-15", "2020-08-18", "2020-08-21", "2020-08-24", "2020-08-27", "2020-08-30", "2020-09-03", "2020-09-06", "2020-09-09", "2020-09-12", "2020-09-15", "2020-09-18", "2020-09-21", "2020-09-24", "2020-09-27", "2020-09-30", "2020-10-03", "2020-10-06", "2020-10-09", "2020-10-12", "2020-10-15", "2020-10-18", "2020-10-21", "2020-10-24", "2020-10-27", "2020-10-30", "2020-11-03", "2020-11-06", "2020-11-09", "2020-11-12", "2020-11-15", "2020-11-18", "2020-11-21", "2020-11-24", "2020-11-27", "2020-11-30", "2020-12-03", "2020-12-06", "2020-12-09", "2020-12-12", "2020-12-15", "2020-12-18", "2020-12-21", "2020-12-24", "2020-12-27", "2020-12-30", "2021-01-03", "2021-01-06", "2021-01-09", "2021-01-12", "2021-01-15", "2021-01-18", "2021-01-21", "2021-01-24", "2021-01-27", "2021-01-30", "2021-02-03", "2021-02-06", "2021-02-09", "2021-02-12", "2021-02-15", "2021-02-18", "2021-02-21", "2021-02-24", "2021-02-27"]
        ).subtracting(oldWomDates).subtracting(newDowDates).subtracting(newWomDates)
        var oldDomDates: Set<String> = globalDomDates.subtracting(newDomDates).subtracting(oldWomDates).subtracting(newDowDates).subtracting(newWomDates)
        
        let newTargetSets = Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc),newDowSet,newWomSet,newDomSet)
        task.updateRecurringInstances(startDate: startDate, endDate: endDate, targetSets: newTargetSets)
        
        let instancesFetchRequest: NSFetchRequest<TaskInstance> = TaskInstance.fetchRequest()
        var instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        for instance in instances {
            if newDowDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDowMin) && instance.targetSet!.getMax == Float(newDowMax))
                newDowDates.remove(instance.date!)
            } else if newWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newWomMin) && instance.targetSet!.getMax == Float(newWomMax))
                newWomDates.remove(instance.date!)
            } else if oldWomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(womMin) && instance.targetSet!.getMax == Float(womMax))
                oldWomDates.remove(instance.date!)
            } else if newDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(newDomMin) && instance.targetSet!.getMax == Float(newDomMax))
                newDomDates.remove(instance.date!)
            } else if oldDomDates.contains(instance.date!) {
                XCTAssert(instance.targetSet!.getMin == Float(domMin) && instance.targetSet!.getMax == Float(domMax))
                oldDomDates.remove(instance.date!)
            } else { print(instance.date!); XCTFail() }
            CDCoordinator.moc.delete(instance)
        }
        
        instances = try CDCoordinator.moc.fetch(instancesFetchRequest)
        XCTAssert(instances.count == 0)
        XCTAssert(newDowDates.count == 0)
        XCTAssert(newWomDates.count == 0)
        XCTAssert(newDomDates.count == 0)
        XCTAssert(oldWomDates.count == 0)
        XCTAssert(oldDomDates.count == 0)
        
    }
    
}

// MARK: - updateRecurringInstances performance tests

extension Task_InstanceHandling_Tests {
    
    // MARK: - Date change tests
    
    func testPerformance_updateRecurringInstances_performance_oneYearToFiveYears() {
        let newEnd = Calendar.current.date(from: DateComponents(year: 2025, month: 1, day: 1))!
        self.measure {
            task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        }
    }
    
    func testPerformance_updateRecurringInstances_performance_oneYearToTenYears() {
        let newEnd = Calendar.current.date(from: DateComponents(year: 2030, month: 1, day: 1))!
        self.measure {
            task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        }
    }
    
    func testPerformance_updateRecurringInstances_performance_fiveYearsToTenYears() {
        var newEnd = Calendar.current.date(from: DateComponents(year: 2025, month: 1, day: 1))!
        task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        
        newEnd = Calendar.current.date(from: DateComponents(year: 2030, month: 1, day: 1))!
        self.measure {
            task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        }
    }
    
    func testPerformance_updateRecurringInstances_performance_fiveYearsToTwentyFiveYears() {
        var newEnd = Calendar.current.date(from: DateComponents(year: 2025, month: 1, day: 1))!
        task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        
        newEnd = Calendar.current.date(from: DateComponents(year: 2045, month: 1, day: 1))!
        self.measure {
            task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        }
    }
    
    func testPerformance_updateRecurringInstances_performance_tenYearsToTwentyFiveYears() {
        var newEnd = Calendar.current.date(from: DateComponents(year: 2030, month: 1, day: 1))!
        task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        
        newEnd = Calendar.current.date(from: DateComponents(year: 2045, month: 1, day: 1))!
        self.measure {
            task.updateRecurringInstances(startDate: startDate, endDate: newEnd)
        }
    }
    
    // MARK: - TTS deletion tests
    
    func testPerformance_updateRecurringInstances_performance_fiveYears_twoTTS() {
        
        let newStart = Calendar.current.date(from: DateComponents(year: 2020, month: 1, day: 1))!
        let newEnd = Calendar.current.date(from: DateComponents(year: 2025, month: 1, day: 1))!
        
        let newTargetSets = Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc))
        self.measure {
            task.updateRecurringInstances(startDate: newStart, endDate: newEnd, targetSets: newTargetSets)
        }
        
    }
    
    func testPerformance_updateRecurringInstances_performance_tenYears_twoTTS() {
        
        let newStart = Calendar.current.date(from: DateComponents(year: 2020, month: 1, day: 1))!
        let newEnd = Calendar.current.date(from: DateComponents(year: 2030, month: 1, day: 1))!
        
        let newTargetSets = Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc))
        self.measure {
            task.updateRecurringInstances(startDate: newStart, endDate: newEnd, targetSets: newTargetSets)
        }
        
    }
    
    func testPerformance_updateRecurringInstances_performance_twentyFiveYears_twoTTS() {
        
        let newStart = Calendar.current.date(from: DateComponents(year: 2020, month: 1, day: 1))!
        let newEnd = Calendar.current.date(from: DateComponents(year: 2045, month: 1, day: 1))!
        
        let newTargetSets = Set(arrayLiteral: getWomTargetSet(CDCoordinator.moc),getDomTargetSet(CDCoordinator.moc))
        self.measure {
            task.updateRecurringInstances(startDate: newStart, endDate: newEnd, targetSets: newTargetSets)
        }
        
    }
    
    /**
     Test updateRecurringInstances with 3 TTSes and every day selected in the dom TTS
     */
    func testPerformance_updateRecurringInstances_performance_twentyFiveYears_threeTTS_fullDom() {
        
        let newStart = Calendar.current.date(from: DateComponents(year: 2020, month: 1, day: 1))!
        let newEnd = Calendar.current.date(from: DateComponents(year: 2045, month: 1, day: 1))!
        
        let newDomSet = TaskTargetSet(entity: TaskTargetSet.getEntityDescription(CDCoordinator.moc)!,
                                      insertInto: CDCoordinator.moc,
                                      min: 0, max: 1, minOperator: 1, maxOperator: 1, priority: 9,
                                      pattern: DayPattern(dow: Set<Int16>(), wom: Set<Int16>(), dom: Set<Int16>([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])))
        let newTargetSets: Set<TaskTargetSet> = Set(arrayLiteral: getDowTargetSet(CDCoordinator.moc), getWomTargetSet(CDCoordinator.moc), newDomSet)
        
        self.measure {
            task.updateRecurringInstances(startDate: newStart, endDate: newEnd, targetSets: newTargetSets)
        }
        
    }
    
}
